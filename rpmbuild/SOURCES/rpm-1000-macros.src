%_db_backend sqlite
%_usr /usr/local/
%osxflags -mmacosx-version-min=11.0 -Wpartial-availability
%build_cflags %{optflags} %{osxflags}
%build_cxxflags %{optflags} %{osxflags}
%build_fflags %{optflags} %{osxflags}
%build_ldflags -L%{_prefix}/lib
%set_build_flags \
  CFLAGS="${CFLAGS:-%{?build_cflags}}" ; export CFLAGS ; \
  CXXFLAGS="${CXXFLAGS:-%{?build_cxxflags}}" ; export CXXFLAGS ; \
  FFLAGS="${FFLAGS:-%{?build_fflags}}" ; export FFLAGS ; \
  FCFLAGS="${FCFLAGS:-%{?build_fflags}}" ; export FCFLAGS ; \
  LDFLAGS="${LDFLAGS:-%{?build_ldflags}}" ; export LDFLAGS ; \
  CPPFLAGS="-I%{_includedir}" ; export CPPFLAGS
%_invalid_encoding_terminates_build 0

##### Universal binary setup - assumes out-of-tree build is supported.
%_universal_architectures x86_64 arm64
%enable_universal \
%bcond_with universal \
%define __universal %{?with_universal:-universal}%{!?with_universal:%{nil}} \
%global _isa %{?with_universal?%{nil}}%{!?with_universal:%{_isa}} \
%%if %{with universal} \
BuildArch: noarch \
%%endif

%universal() %{1}%{?__universal}
%ubuildroot %{buildroot}%{?with_universal:.$__arch}
%uarch %{?with_universal:.$__arch}
%uarchdir() %{1}%uarch

# I'd like this to use Conflicts: (%{1} without universal) but dnf doesn't like that
# ^ TODO is this still true now that I've fixed dnf's dependency stuff with that regex patch
%uprovides() \
Provides: %{universal %{1}}%{?2:-%{2}} = %{version}-%{release} \
%if %{with universal} \
Provides: %{1}%{?2:-%{2}} = %{version}-%{release} \
Conflicts: %{1}%{?2:-%{2}} \
%else \
Conflicts: %{1}-universal%{?2:-%{2}} \
%endif

# +--------
# | Run part of a script for all architectures. Pass -n to not generate / use per-arch directories.
# | (if you do, use %%uarch / %%uarchdir in the inner part to differentiate)
%ufor(n) \
__UFOR_MADE_DIRS=%{-n:false}%{!-n:true} \
%if %{with universal} \
%global _configure ../%{_configure} \
ORIG_CFLAGS="${CFLAGS:-%{?build_cflags}}" ; \
ORIG_CXXFLAGS="${CXXFLAGS:-%{?build_cxxflags}}" ; \
ORIG_LDFLAGS="${LDFLAGS:-%{?build_ldflags}}" ; \
for __arch in %_universal_architectures ; do \
  __linux_arch=$(echo $__arch | sed -e 's/arm64/aarch64/') ; \
  %{!-n:mkdir %{uarchdir build} ;} \
  %{!-n:cd %{uarchdir build} ;} \
  export CFLAGS="$ORIG_CFLAGS -arch $__arch" ; \
  export CXXFLAGS="$ORIG_CXXFLAGS -arch $__arch" ; \
  export LDFLAGS="$ORIG_LDFLAGS -arch $__arch" ; \
  export OBJCFLAGS="$CFLAGS" ; \
  echo "--> Architecture: $__arch" \
%else \
%{!-n:mkdir %{uarchdir build} ;} \
%{!-n:cd %{uarchdir build} ;} \
%endif

%udone \
%if %{with universal} \
  if $__UFOR_MADE_DIRS; then cd ..; fi \
done \
%else \
if $__UFOR_MADE_DIRS; then cd ..; fi \
%endif
# |
# +--------

# +--------
# | Run make install (or provided command) on all architectures and merge the results.
%uinstall(n) \
    %umakeinstall %{**} \
    %umerge %{**}

%umakeinstall(n) \
__UFOR_MADE_DIRS=%{-n:false}%{!-n:true} \
%if %{with universal} \
for __arch in %_universal_architectures; do \
  if $__UFOR_MADE_DIRS; then cd %{uarchdir build}; fi \
  rm -rf %{ubuildroot} ; \
  %{?*}%{!?1:%{__make} install DESTDIR=%{ubuildroot} INSTALL="%{__install} -p"} ; \
  __lastarch=$__arch; \
  if $__UFOR_MADE_DIRS; then cd ..; fi \
done ; \
%else \
echo $__UFOR_MADE_DIRS \
if $__UFOR_MADE_DIRS; then cd %{uarchdir build}; fi \
%{?*}%{!?1:%make_install} \
if $__UFOR_MADE_DIRS; then cd ..; fi \
%endif

%umerge(n) \
%if %{with universal} \
__UFOR_MADE_DIRS=%{-n:false}%{!-n:true} \
set +x \
rsync -a --include='*/' --exclude='*' %{buildroot}.$__lastarch/* %{buildroot} ; \
for f in $(find %{buildroot}.$__lastarch \\( -type l -o -type f \\) | sed -e "s:^%{buildroot}.$__lastarch::"); do \
  if readlink $f >/dev/null ; then \
    echo "--> Symlink: $f -> $(readlink $f)" ; \
    ln -s $(readlink $f) %{buildroot}/$f ; \
  elif [ -x $f ] && file %{buildroot}.$__lastarch/$f | grep -q Mach-O ; then \
    echo "--> Merging architectures: $f" ; \
    FILES="" ; \
    for arch in %_universal_architectures; do \
      FILES="$FILES %{buildroot}.$arch/$f" ; \
    done ; \
    lipo -create -output %{buildroot}/"$f" $FILES ; \
  elif [ ! -d $f ] ; then \
    echo "--> Copying: $f" ; \
    cp -pP %{buildroot}.$__lastarch/$f %{buildroot}/$f ; \
  fi \
done ; \
set -x \
%endif
# |
# +--------

# +--------
# | CMake.

%cmake_configure \
  %set_build_flags; \
  cmake -Wno-dev -DCMAKE_INSTALL_PREFIX=%{_prefix} -DCMAKE_BUILD_TYPE=Release

%cmake_build cmake --build . %{?_smp_mflags}

# |
# +--------

# +--------
# | /usr/local/opt.

%optlink \
  install -dm755 %{buildroot}%{_bindir} \
  for f in $(ls %{buildroot}%{_prefix}/opt/%{name}/bin); do \
      ln -sv ../opt/%{name}/bin/$f %{buildroot}%{_bindir}/g$f \
  done

%optpost \
%posttrans \
echo Note: macOS provides its own %{name}, so %{name}\\'s binaries have been installed under /usr/local/opt/%{name}/bin. \
echo Additionally, they have been symlinked as /usr/local/bin/g\\<binary\\>.

